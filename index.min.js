function e(a,b={}){const d=Object.keys(b),c=Object.values(b);try{return new Function(...d,`return \`${a}\`;`)(...c)}catch(h){throw new g(a,b,h)}}class g extends Error{constructor(a,b,d){super();this.name="TemplateError";let c=`
------------------
`;c+=`Template: \`${a}\``,c+=`
------------------
`,c+=`Tags: ${JSON.stringify(b,null,2)}`,c+=`
------------------
`,c+=d,this.message=c}}class f extends HTMLElement{static get observedAttributes(){return["src","context"]}attributeChangedCallback(a,b,d){if(!this.__initialized)return;b!==d&&(this[a]=d)}get src(){return this.getAttribute("src")}set src(a){this.setAttribute("src",a),this.setSrc(),this.render()}get context(){return this.getAttribute("context")}set context(a){this.setAttribute("context",a),this.setContext(),this.render()}constructor(){super();this.__initialized=!1,this.__template="",this.__context={}}async connectedCallback(){this.hasAttribute("src")&&await this.setSrc(),this.hasAttribute("context")&&await this.setContext(),this.render(),this.__initialized=!0}async setSrc(){const a=this.getAttribute("src");this.__template=await this.fetchSrc(a)}async fetchSrc(a){const b=await fetch(a);if(b.status!==200)throw Error(`ERR ${b.status}: ${b.statusText}`);return b.text()}async setContext(){const a=this.getAttribute("context");this.__context=await this.fetchContext(a)}async fetchContext(a){const b=await fetch(a);if(b.status!==200)throw Error(`ERR ${b.status}: ${b.statusText}`);return b.json()}render(){this.innerHTML=e(this.__template,this.__context)}}customElements.define("wc-template",f);export{f as WCTemplate};
